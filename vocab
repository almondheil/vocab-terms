#!/usr/bin/env python3

import argparse
import sys
from pathlib import Path


class TermFile:
    def __init__(self, path, is_parent):
        self.path = path
        self.is_parent = is_parent


# name of the top-level vocab dir
VOCAB_DIR_PATH = Path('terms')

# what extension do term files have?
TERM_FILE_EXTENSION = '.txt'

# when a term has children, it must become a directory. in this case, its content gets moved to TERM_INDEX_NAME within the dir.
TERM_INDEX_NAME = '_index'


def eprint(*args, **kwargs):
    print(*args, **kwargs, file=sys.stderr)


def find_term(name) -> TermFile:
    """
    find a term's path by its exact name

    name: string, the name to find (ignoring any extension)

    returns the TermFile location, or None if it's not found
    """
    root = VOCAB_DIR_PATH
    if not root.is_dir():
        return None

    for path in root.rglob('*'):
        # simple case: match files that have exactly that name
        path_name_match = path.name == (name + TERM_FILE_EXTENSION)
        if path_name_match:
            return TermFile(path, False)

        # complex case: match files named _index + TERM_FILE_EXTENSION within a directory called name
        parent_name_match = path.parent.name == name
        path_name_index = path.name == TERM_INDEX_NAME
        if parent_name_match and path_name_index:
            return TermFile(path, True)

    return None


def create_term_file(path, contents):
    """
    Create a new term file at the given path. Refuses to overwrite a file.

    path: Path where it'll go, must NOT already exist. (eg `vocabulary/foo/bar` for term `bar`)
    contents: String to store inside
    """
    # don't duplicate an existing file
    if path.exists():
        eprint(f'Term already exists at path "{path}"')
        exit(1)

    # if there's a directory with the proper name, that also counts as a duplicate
    dirname = path.name.strip(TERM_FILE_EXTENSION)
    dirpath = path.parent / dirname
    if dirpath.exists():
        eprint(f'Term already exists as parent directory at path "{dirpath}"')
        exit(1)

    with path.open('w') as term_file:
        term_file.write(contents)
        term_file.write('\n')


def add_term(args):
    """
    Subcommand to add a new term.

    args: Args from argparse.
    """

    if args.name == TERM_INDEX_NAME:
        eprint(f'Cannot create a term with name {TERM_INDEX_NAME}, sorry')
        exit(1)

    if args.parent:
        # try to find the parent, if we can't error out.
        parent_term = find_term(args.parent)
        if parent_term == None:
            eprint(f'Could not find a term with name "{args.parent}"')
            exit(1)

        # if the parent path is not already the parent of other dirs, convert it to one
        if not parent_term.is_parent:
            # create a dir named the same as the parent, but with no file extension
            dirname = parent_term.path.name.strip(TERM_FILE_EXTENSION)
            dirpath = Path(parent_term.path.parent / dirname)
            dirpath.mkdir()

            # move the parent term into that dir as the INDEX file
            parent_term.path = parent_term.path.rename(dirpath / TERM_INDEX_NAME)

        # place this term inside the parent path dir
        term_path = parent_term.path.parent / (args.name + TERM_FILE_EXTENSION)

    else:
        # no parent, standalone term
        term_path = VOCAB_DIR_PATH / (args.name + TERM_FILE_EXTENSION)

    # create and output the term path to the user -- so they can script with it or whatever
    create_term_file(term_path, args.desc)
    print(term_path)


def search_term(args):
    """
    Subcommand to search for an existing term.

    args: Args from argparse.
    """

    term = find_term(args.name)
    if term == None:
        eprint(f'No term named "{args.name}" found')
        exit(2)

    # read the contents of the file path
    with term.path.open('r') as f:
        desc = f.read()

    # print only path if --script, otherwise print all info
    if args.script:
        print(term.path)
    else:
        print(f'{args.name} - {desc}', end='') # desc likely has \n, if not that's on purpose
        if term.is_parent:
            print('child terms:')
            for path in term.path.parent.glob(f'*{TERM_FILE_EXTENSION}'):
                name = path.name.strip(TERM_FILE_EXTENSION)
                print(f'  - {name}')


def main():
    parser = argparse.ArgumentParser(
        prog='vocab',
        description='Create and search vocab terms within a directory tree.'
    )

    subparsers = parser.add_subparsers(help='subcommand help', required=True)
    p_add = subparsers.add_parser('add', help='add new term term', aliases=['a'])
    p_search = subparsers.add_parser('search', help='search for term', aliases=['s'])

    # add args
    p_add.add_argument('name', help='new term name')
    p_add.add_argument('desc', nargs='?', default='', help='(optional) new term description')
    p_add.add_argument('-p', '--parent', help='name of parent term')
    p_add.set_defaults(func=add_term)

    # search args
    p_search.add_argument('name', help='term name to search for')
    p_search.add_argument('--script', action='store_true', help='if enabled, do not print found term info-- only path')
    p_search.set_defaults(func=search_term)

    # actually parse, so we hit any invalid arg errors now
    args = parser.parse_args()

    # create VOCAB_DIR_PATH if not already exists
    vocab_dir = VOCAB_DIR_PATH
    try:
        vocab_dir.mkdir(exist_ok=True)
    except FileExistsError as e:
        eprint(f'Path "{VOCAB_DIR_PATH}" already exists, but is not a directory.')
        exit(1)

    # run whichever func corresponds to selected subcommand
    args.func(args)


if __name__ == '__main__':
    main()
